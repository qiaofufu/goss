// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: api/bucket/v1/bucket.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bucket_CreateBucket_FullMethodName = "/api.bucket.v1.Bucket/CreateBucket"
	Bucket_UpdateBucket_FullMethodName = "/api.bucket.v1.Bucket/UpdateBucket"
	Bucket_DeleteBucket_FullMethodName = "/api.bucket.v1.Bucket/DeleteBucket"
	Bucket_GetBucket_FullMethodName    = "/api.bucket.v1.Bucket/GetBucket"
	Bucket_ListBucket_FullMethodName   = "/api.bucket.v1.Bucket/ListBucket"
)

// BucketClient is the client API for Bucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketClient interface {
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketReply, error)
	UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketReply, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketReply, error)
	GetBucket(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketReply, error)
	ListBucket(ctx context.Context, in *ListBucketRequest, opts ...grpc.CallOption) (*ListBucketReply, error)
}

type bucketClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketClient(cc grpc.ClientConnInterface) BucketClient {
	return &bucketClient{cc}
}

func (c *bucketClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketReply, error) {
	out := new(CreateBucketReply)
	err := c.cc.Invoke(ctx, Bucket_CreateBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketReply, error) {
	out := new(UpdateBucketReply)
	err := c.cc.Invoke(ctx, Bucket_UpdateBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketReply, error) {
	out := new(DeleteBucketReply)
	err := c.cc.Invoke(ctx, Bucket_DeleteBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetBucket(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketReply, error) {
	out := new(GetBucketReply)
	err := c.cc.Invoke(ctx, Bucket_GetBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) ListBucket(ctx context.Context, in *ListBucketRequest, opts ...grpc.CallOption) (*ListBucketReply, error) {
	out := new(ListBucketReply)
	err := c.cc.Invoke(ctx, Bucket_ListBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServer is the server API for Bucket service.
// All implementations must embed UnimplementedBucketServer
// for forward compatibility
type BucketServer interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketReply, error)
	UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketReply, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketReply, error)
	GetBucket(context.Context, *GetBucketRequest) (*GetBucketReply, error)
	ListBucket(context.Context, *ListBucketRequest) (*ListBucketReply, error)
	mustEmbedUnimplementedBucketServer()
}

// UnimplementedBucketServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServer struct {
}

func (UnimplementedBucketServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBucketServer) UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucket not implemented")
}
func (UnimplementedBucketServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedBucketServer) GetBucket(context.Context, *GetBucketRequest) (*GetBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucket not implemented")
}
func (UnimplementedBucketServer) ListBucket(context.Context, *ListBucketRequest) (*ListBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucket not implemented")
}
func (UnimplementedBucketServer) mustEmbedUnimplementedBucketServer() {}

// UnsafeBucketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServer will
// result in compilation errors.
type UnsafeBucketServer interface {
	mustEmbedUnimplementedBucketServer()
}

func RegisterBucketServer(s grpc.ServiceRegistrar, srv BucketServer) {
	s.RegisterService(&Bucket_ServiceDesc, srv)
}

func _Bucket_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_UpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).UpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_UpdateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).UpdateBucket(ctx, req.(*UpdateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_GetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetBucket(ctx, req.(*GetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_ListBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).ListBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_ListBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).ListBucket(ctx, req.(*ListBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bucket_ServiceDesc is the grpc.ServiceDesc for Bucket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bucket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bucket.v1.Bucket",
	HandlerType: (*BucketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _Bucket_CreateBucket_Handler,
		},
		{
			MethodName: "UpdateBucket",
			Handler:    _Bucket_UpdateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _Bucket_DeleteBucket_Handler,
		},
		{
			MethodName: "GetBucket",
			Handler:    _Bucket_GetBucket_Handler,
		},
		{
			MethodName: "ListBucket",
			Handler:    _Bucket_ListBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bucket/v1/bucket.proto",
}
