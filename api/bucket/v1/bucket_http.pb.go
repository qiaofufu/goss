// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.6.1
// source: api/bucket/v1/bucket.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBucketCreateBucket = "/api.bucket.v1.Bucket/CreateBucket"
const OperationBucketDeleteBucket = "/api.bucket.v1.Bucket/DeleteBucket"
const OperationBucketGetBucket = "/api.bucket.v1.Bucket/GetBucket"
const OperationBucketListBucket = "/api.bucket.v1.Bucket/ListBucket"
const OperationBucketUpdateBucket = "/api.bucket.v1.Bucket/UpdateBucket"

type BucketHTTPServer interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketReply, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketReply, error)
	GetBucket(context.Context, *GetBucketRequest) (*GetBucketReply, error)
	ListBucket(context.Context, *ListBucketRequest) (*ListBucketReply, error)
	UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketReply, error)
}

func RegisterBucketHTTPServer(s *http.Server, srv BucketHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/bucket", _Bucket_CreateBucket0_HTTP_Handler(srv))
	r.PUT("/v1/bucket", _Bucket_UpdateBucket0_HTTP_Handler(srv))
	r.DELETE("/v1/bucket", _Bucket_DeleteBucket0_HTTP_Handler(srv))
	r.GET("/v1/bucket/{id}", _Bucket_GetBucket0_HTTP_Handler(srv))
	r.GET("/v1/bucket", _Bucket_ListBucket0_HTTP_Handler(srv))
}

func _Bucket_CreateBucket0_HTTP_Handler(srv BucketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBucketCreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBucketReply)
		return ctx.Result(200, reply)
	}
}

func _Bucket_UpdateBucket0_HTTP_Handler(srv BucketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBucketUpdateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucket(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBucketReply)
		return ctx.Result(200, reply)
	}
}

func _Bucket_DeleteBucket0_HTTP_Handler(srv BucketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBucketDeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBucketReply)
		return ctx.Result(200, reply)
	}
}

func _Bucket_GetBucket0_HTTP_Handler(srv BucketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBucketGetBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBucket(ctx, req.(*GetBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBucketReply)
		return ctx.Result(200, reply)
	}
}

func _Bucket_ListBucket0_HTTP_Handler(srv BucketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBucketListBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBucket(ctx, req.(*ListBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketReply)
		return ctx.Result(200, reply)
	}
}

type BucketHTTPClient interface {
	CreateBucket(ctx context.Context, req *CreateBucketRequest, opts ...http.CallOption) (rsp *CreateBucketReply, err error)
	DeleteBucket(ctx context.Context, req *DeleteBucketRequest, opts ...http.CallOption) (rsp *DeleteBucketReply, err error)
	GetBucket(ctx context.Context, req *GetBucketRequest, opts ...http.CallOption) (rsp *GetBucketReply, err error)
	ListBucket(ctx context.Context, req *ListBucketRequest, opts ...http.CallOption) (rsp *ListBucketReply, err error)
	UpdateBucket(ctx context.Context, req *UpdateBucketRequest, opts ...http.CallOption) (rsp *UpdateBucketReply, err error)
}

type BucketHTTPClientImpl struct {
	cc *http.Client
}

func NewBucketHTTPClient(client *http.Client) BucketHTTPClient {
	return &BucketHTTPClientImpl{client}
}

func (c *BucketHTTPClientImpl) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...http.CallOption) (*CreateBucketReply, error) {
	var out CreateBucketReply
	pattern := "/v1/bucket"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBucketCreateBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BucketHTTPClientImpl) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...http.CallOption) (*DeleteBucketReply, error) {
	var out DeleteBucketReply
	pattern := "/v1/bucket"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBucketDeleteBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BucketHTTPClientImpl) GetBucket(ctx context.Context, in *GetBucketRequest, opts ...http.CallOption) (*GetBucketReply, error) {
	var out GetBucketReply
	pattern := "/v1/bucket/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBucketGetBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BucketHTTPClientImpl) ListBucket(ctx context.Context, in *ListBucketRequest, opts ...http.CallOption) (*ListBucketReply, error) {
	var out ListBucketReply
	pattern := "/v1/bucket"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBucketListBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BucketHTTPClientImpl) UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...http.CallOption) (*UpdateBucketReply, error) {
	var out UpdateBucketReply
	pattern := "/v1/bucket"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBucketUpdateBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
