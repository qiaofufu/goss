// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"master/internal/biz"
	"master/internal/conf"
	"master/internal/data"
	"master/internal/server"
	"master/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, node *conf.Node, hash *conf.Hash, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	uniqueIDGenerator := data.NewUniqueIDGenerator(node)
	bucketRepo := data.NewBucketRepo(dataData, logger, uniqueIDGenerator)
	bucketUsecase := biz.NewBucketUsecase(bucketRepo, logger)
	bucketService := service.NewBucketService(bucketUsecase)
	nodeRepo := data.NewNodeRepo(dataData, logger, uniqueIDGenerator)
	consistentHash := biz.NewConsistentHash(hash)
	nodeUsecase := biz.NewNodeUsecase(nodeRepo, logger, consistentHash)
	nodeService := service.NewNodeService(nodeUsecase)
	objectRepo := data.NewObjectRepo(dataData, logger, uniqueIDGenerator)
	objectUsecase := biz.NewObjectUsecase(objectRepo, logger)
	objectService := service.NewObjectService(objectUsecase)
	blockRepo := data.NewBlockRepo(dataData, logger, uniqueIDGenerator)
	blockUsecase := biz.NewBlockUsecase(blockRepo, logger)
	blockService := service.NewBlockService(blockUsecase)
	aclRepo := data.NewAclRepo(dataData, logger, uniqueIDGenerator)
	aclUsecase := biz.NewAclUsecase(aclRepo, logger)
	aclService := service.NewAclService(aclUsecase, logger)
	userRepo := data.NewUserRepo(dataData, uniqueIDGenerator)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	userService := service.NewUserService(userUsecase, logger)
	locationRepo := data.NewLocationRepo(dataData)
	locationUsecase := biz.NewLocationUsecase(locationRepo)
	locationService := service.NewLocationService(locationUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, bucketService, nodeService, objectService, blockService, aclService, userService, locationService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
